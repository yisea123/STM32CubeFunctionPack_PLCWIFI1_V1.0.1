<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [OUT01A1\OUT01A1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image OUT01A1\OUT01A1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Dec 21 09:47:13 2018
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; PLC_WiFi_Interface &rArr; WiFi_Decode &rArr; Component_parser &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[32]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a]">BusFault_Handler</a> from stm32_xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11]">CLT01_38S_Deinit</a> from clt01_38s.o(i.CLT01_38S_Deinit) referenced 2 times from clt01_38s.o(.data)
 <LI><a href="#[15]">CLT01_38S_GetCommErrorStatus</a> from clt01_38s.o(i.CLT01_38S_GetCommErrorStatus) referenced 2 times from clt01_38s.o(.data)
 <LI><a href="#[12]">CLT01_38S_GetData</a> from clt01_38s.o(i.CLT01_38S_GetData) referenced 2 times from clt01_38s.o(.data)
 <LI><a href="#[13]">CLT01_38S_GetOtaStatus</a> from clt01_38s.o(i.CLT01_38S_GetOtaStatus) referenced 2 times from clt01_38s.o(.data)
 <LI><a href="#[14]">CLT01_38S_GetUvaStatus</a> from clt01_38s.o(i.CLT01_38S_GetUvaStatus) referenced 2 times from clt01_38s.o(.data)
 <LI><a href="#[10]">CLT01_38S_Init</a> from clt01_38s.o(i.CLT01_38S_Init) referenced 2 times from clt01_38s.o(.data)
 <LI><a href="#[2b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[46]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from stm32_xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[56]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18]">HardFault_Handler</a> from stm32_xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3]">ISO_DriveLoad</a> from iso8200bq.o(i.ISO_DriveLoad) referenced 2 times from iso8200bq.o(.data)
 <LI><a href="#[2]">ISO_DrivePin</a> from iso8200bq.o(i.ISO_DrivePin) referenced 2 times from iso8200bq.o(.data)
 <LI><a href="#[4]">ISO_DriveSinch</a> from iso8200bq.o(i.ISO_DriveSinch) referenced 2 times from iso8200bq.o(.data)
 <LI><a href="#[19]">MemManage_Handler</a> from stm32_xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from stm32_xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[21]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from stm32_xx_it.o(i.PendSV_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[23]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[47]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[49]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[57]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from stm32_xx_it.o(i.SVC_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1f]">SysTick_Handler</a> from stm32_xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[22]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[35]">TIM1_UP_TIM10_IRQHandler</a> from stm32_xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from stm32_xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from stm32_xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from stm32_xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[48]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5b]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[41]">USART1_IRQHandler</a> from stm32_xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from stm32_xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b]">UsageFault_Handler</a> from stm32_xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6]">VNI8200XP_Deinit</a> from vni8200xp.o(i.VNI8200XP_Deinit) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[8]">VNI8200XP_EnableOutputs</a> from vni8200xp.o(i.VNI8200XP_EnableOutputs) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[a]">VNI8200XP_GetChFaultStatus</a> from vni8200xp.o(i.VNI8200XP_GetChFaultStatus) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[f]">VNI8200XP_GetCommErrorStatus</a> from vni8200xp.o(i.VNI8200XP_GetCommErrorStatus) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[b]">VNI8200XP_GetFbOkStatus</a> from vni8200xp.o(i.VNI8200XP_GetFbOkStatus) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[d]">VNI8200XP_GetPcFailStatus</a> from vni8200xp.o(i.VNI8200XP_GetPcFailStatus) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[e]">VNI8200XP_GetPowerGoodStatus</a> from vni8200xp.o(i.VNI8200XP_GetPowerGoodStatus) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[c]">VNI8200XP_GetTempWarningStatus</a> from vni8200xp.o(i.VNI8200XP_GetTempWarningStatus) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[5]">VNI8200XP_Init</a> from vni8200xp.o(i.VNI8200XP_Init) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[7]">VNI8200XP_Reset</a> from vni8200xp.o(i.VNI8200XP_Reset) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[9]">VNI8200XP_SetOutput</a> from vni8200xp.o(i.VNI8200XP_SetOutput) referenced 2 times from vni8200xp.o(.data)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[5d]">_sputc</a> from printf4.o(i._sputc) referenced from printf4.o(i.__0sprintf$4)
 <LI><a href="#[5c]">fputc</a> from console.o(i.fputc) referenced from printf4.o(i.__0printf$4)
 <LI><a href="#[58]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[152]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[153]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[154]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[155]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[156]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[157]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restore
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_buffer_queue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Decode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Output
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_buffer_queue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Component_parser
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_data_received
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[df]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[e5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiServer_Answer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_data_received
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Component_parser
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round_Number
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round_Number
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[15d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[142]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[160]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[161]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[162]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[69]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[163]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>BSP_CurrentLimiter_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.BSP_CurrentLimiter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_CurrentLimiter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePlc
</UL>

<P><STRONG><a name="[d2]"></a>BSP_DrivePin_GROUP</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, x_nucleo_01a1.o(i.BSP_DrivePin_GROUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_DrivePin_GROUP
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_Polling
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[72]"></a>BSP_ISO_Com_Settings</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, x_nucleo_01a1.o(i.BSP_ISO_Com_Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ISO_Com_Settings
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_Polling
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[74]"></a>BSP_LED_On</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[d1]"></a>BSP_OutputEnable_Pin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, x_nucleo_01a1.o(i.BSP_OutputEnable_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_OutputEnable_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_Polling
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[148]"></a>BSP_RELAY_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.BSP_RELAY_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RELAY_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePlc
</UL>

<P><STRONG><a name="[146]"></a>BSP_Relay_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.BSP_Relay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Relay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePlc
</UL>

<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_xx_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler &rArr; BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CLT01_38S_CommErrorStatus</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.CLT01_38S_CommErrorStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_GetCommErrorStatus
</UL>

<P><STRONG><a name="[77]"></a>CLT01_38S_GetInpData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.CLT01_38S_GetInpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLT01_38S_GetInpData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_GetData
</UL>

<P><STRONG><a name="[7b]"></a>CLT01_38S_IO_Config</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, x_nucleo_plc01a1.o(i.CLT01_38S_IO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLT01_38S_IO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_Init
</UL>

<P><STRONG><a name="[79]"></a>CLT01_38S_OtaStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.CLT01_38S_OtaStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_GetOtaStatus
</UL>

<P><STRONG><a name="[7a]"></a>CLT01_38S_UvaStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.CLT01_38S_UvaStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_GetUvaStatus
</UL>

<P><STRONG><a name="[7d]"></a>CURRENT_LIMITER_IO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.CURRENT_LIMITER_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CURRENT_LIMITER_IO_Init &rArr; SPI_EXPBD_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_Init
</UL>

<P><STRONG><a name="[db]"></a>ClearFlag_ResetOUT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ladder_lib.o(i.ClearFlag_ResetOUT))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePlc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[7f]"></a>Component_parser</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, ladder_lib.o(i.Component_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Component_parser &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_TimComp_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Decode
</UL>

<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_xx_it.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DebugMon_Handler &rArr; BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifi_module.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Error_Handler &rArr; Receive_Data &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PRINT_MSG_Configuration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_ErrorCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
</UL>

<P><STRONG><a name="[84]"></a>Evalute_Expression</STRONG> (Thumb, 1628 bytes, Stack size 24 bytes, ladder_lib.o(i.Evalute_Expression))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Evalute_Expression &rArr; ToAnalizeCounterIN
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToAnalizeCounterIN
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OR
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Next
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_NOT
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Input
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AND
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_GetOutput
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_Config</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, plc_handling.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>Get_AND</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ladder_lib.o(i.Get_AND))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>

<P><STRONG><a name="[104]"></a>Get_FlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ladder_lib.o(i.Get_FlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8b]"></a>Get_Input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ladder_lib.o(i.Get_Input))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>

<P><STRONG><a name="[87]"></a>Get_NOT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ladder_lib.o(i.Get_NOT))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>

<P><STRONG><a name="[8c]"></a>Get_Next</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ladder_lib.o(i.Get_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>

<P><STRONG><a name="[86]"></a>Get_OR</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ladder_lib.o(i.Get_OR))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>

<P><STRONG><a name="[d9]"></a>Get_ResetOUT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ladder_lib.o(i.Get_ResetOUT))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[bd]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>HAL_Delay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
</UL>

<P><STRONG><a name="[c3]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 282 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
</UL>

<P><STRONG><a name="[7c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Msg_Gpio_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EXPBD_MspInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_IO_Config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_IO_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakeup
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
</UL>

<P><STRONG><a name="[73]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ISO_Com_Settings
</UL>

<P><STRONG><a name="[75]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_GetInpData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_SendOutputData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_ResetIt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_EnOut
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO8200BQ_IO_Write
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WD
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakeup
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
</UL>

<P><STRONG><a name="[8f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[105]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[90]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[93]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[95]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[91]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1090 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fe]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EXPBD_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EXPBD_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, stm32_xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[78]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 542 bytes, Stack size 48 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_GetInpData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_SendOutputData
</UL>

<P><STRONG><a name="[108]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[94]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b2]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_TimComp_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_TimComp_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_TimComp_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[a5]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, stm32_xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[88]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>

<P><STRONG><a name="[89]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Output
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>

<P><STRONG><a name="[a8]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_TimComp_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32_xx_it.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>HAL_UART_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PRINT_MSG_Configuration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[b8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32_xx_it.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_ErrorCallback &rArr; WiFi_HAL_UART_ErrorCallback &rArr; Error_Handler &rArr; Receive_Data &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PRINT_MSG_Configuration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[b7]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32_xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[c1]"></a>HAL_UART_MspInit</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, stm32_xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
</UL>

<P><STRONG><a name="[c5]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32_xx_it.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32_xx_it.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler &rArr; BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>ISO8200BQ_IO_Write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, x_nucleo_01a1.o(i.ISO8200BQ_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ISO8200BQ_IO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO_DriveSinch
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO_DrivePin
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO_DriveLoad
</UL>

<P><STRONG><a name="[3]"></a>ISO_DriveLoad</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, iso8200bq.o(i.ISO_DriveLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ISO_DriveLoad &rArr; ISO8200BQ_IO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO8200BQ_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iso8200bq.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>ISO_DrivePin</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, iso8200bq.o(i.ISO_DrivePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ISO_DrivePin &rArr; ISO8200BQ_IO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO8200BQ_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iso8200bq.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ISO_DriveSinch</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, iso8200bq.o(i.ISO_DriveSinch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ISO_DriveSinch &rArr; ISO8200BQ_IO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO8200BQ_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iso8200bq.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>Init_Output</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, ladder_lib.o(i.Init_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Count
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Decode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePlc
</UL>

<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_xx_it.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler &rArr; BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>PLC_GetOutput</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ladder_lib.o(i.PLC_GetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PLC_GetOutput &rArr; Evalute_Expression &rArr; ToAnalizeCounterIN
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;To_Evaluated
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_Polling
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[d0]"></a>PLC_Polling</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, plc_handling.o(i.PLC_Polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PLC_Polling &rArr; PLC_GetOutput &rArr; Evalute_Expression &rArr; ToAnalizeCounterIN
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OutputEnable_Pin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ISO_Com_Settings
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DrivePin_GROUP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_GetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[81]"></a>PLC_TimComp_Init</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, x_nucleo_plc01a1.o(i.PLC_TimComp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PLC_TimComp_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Component_parser
</UL>

<P><STRONG><a name="[d5]"></a>PLC_WD</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, plc_handling.o(i.PLC_WD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PLC_WD
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>PLC_WiFi_Interface</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, plc_handling.o(i.PLC_WiFi_Interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = PLC_WiFi_Interface &rArr; WiFi_Decode &rArr; Component_parser &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OutputEnable_Pin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ISO_Com_Settings
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DrivePin_GROUP
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Decode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restore
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Count
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_GetOutput
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ResetOUT
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlag_ResetOUT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiServer_Answer
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>Process_Buffer</STRONG> (Thumb, 4426 bytes, Stack size 40 bytes, wifi_module.o(i.Process_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Process_Buffer &rArr; Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewind_buffer_queue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_eventbuffer_queue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Timer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Dequeue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Timer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_WiFi
</UL>

<P><STRONG><a name="[ec]"></a>Process_DeQed_Wind_Indication</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, wifi_module.o(i.Process_DeQed_Wind_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_DeepSleep_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[ef]"></a>Process_WiFi</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wifi_module.o(i.Process_WiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Process_WiFi &rArr; Process_Buffer &rArr; Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_buffer_queue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
</UL>

<P><STRONG><a name="[e1]"></a>Process_Wind_Indication</STRONG> (Thumb, 1184 bytes, Stack size 32 bytes, wifi_module.o(i.Process_Wind_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[e4]"></a>Queue_Client_Close_Event</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wifi_module.o(i.Queue_Client_Close_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Queue_Client_Close_Event &rArr; push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_event
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_eventbuffer_queue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_Sock_Read_To_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[f2]"></a>RELAY_IO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.RELAY_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RELAY_IO_Init &rArr; SPI_EXPBD_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_IO_Init
</UL>

<P><STRONG><a name="[83]"></a>Receive_Data</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wifi_module.o(i.Receive_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Receive_Data &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
</UL>

<P><STRONG><a name="[f4]"></a>Reset_AT_CMD_Buffer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifi_module.o(i.Reset_AT_CMD_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reset_AT_CMD_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
</UL>

<P><STRONG><a name="[cd]"></a>Reset_Count</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ladder_lib.o(i.Reset_Count))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Output
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[dc]"></a>Restore</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ladder_lib.o(i.Restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Restore
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[125]"></a>Resume_Dequeue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_module.o(i.Resume_Dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[d3]"></a>Round_Number</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, x_nucleo_plc01a1.o(i.Round_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Round_Number
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_TimComp_Init
</UL>

<P><STRONG><a name="[f7]"></a>SET_Configuration_Addr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wifi_module.o(i.SET_Configuration_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SET_Configuration_Addr &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[fb]"></a>SET_Configuration_Value</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wifi_module.o(i.SET_Configuration_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SET_Configuration_Value &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_start
</UL>

<P><STRONG><a name="[fc]"></a>SET_Power_State</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wifi_module.o(i.SET_Power_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SET_Power_State &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_start
</UL>

<P><STRONG><a name="[fd]"></a>SET_SSID</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wifi_module.o(i.SET_SSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SET_SSID &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_start
</UL>

<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_xx_it.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_Handler &rArr; BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>Save</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ladder_lib.o(i.Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Save
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[100]"></a>Save_Current_Setting</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wifi_module.o(i.Save_Current_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Save_Current_Setting &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_start
</UL>

<P><STRONG><a name="[11f]"></a>Set_WiFi_Control_Variables</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wifi_module.o(i.Set_WiFi_Control_Variables))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[11e]"></a>Set_WiFi_Counter_Variables</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wifi_module.o(i.Set_WiFi_Counter_Variables))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[101]"></a>Socket_Pending_Data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wifi_interface.o(i.Socket_Pending_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Socket_Pending_Data &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_command_mode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[103]"></a>Socket_Read</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wifi_interface.o(i.Socket_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Socket_Read &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_command_mode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[ee]"></a>Start_DeepSleep_Timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wifi_module.o(i.Start_DeepSleep_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_DeQed_Wind_Indication
</UL>

<P><STRONG><a name="[e2]"></a>Start_Timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_module.o(i.Start_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[122]"></a>Stop_DeepSleep_Timer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_module.o(i.Stop_DeepSleep_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
</UL>

<P><STRONG><a name="[eb]"></a>Stop_Dequeue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_module.o(i.Stop_Dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[e0]"></a>Stop_Timer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_module.o(i.Stop_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32_xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SysTick_Handler &rArr; Wifi_SysTick_Isr &rArr; Process_WiFi &rArr; Process_Buffer &rArr; Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_Polling
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FlagStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>SystemClock_Config</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[109]"></a>Timer_Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32_spwf_wifi.o(i.Timer_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Timer_Config &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>ToAnalizeCounterIN</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ladder_lib.o(i.ToAnalizeCounterIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ToAnalizeCounterIN
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Evalute_Expression
</UL>

<P><STRONG><a name="[cf]"></a>To_Evaluated</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ladder_lib.o(i.To_Evaluated))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_GetOutput
</UL>

<P><STRONG><a name="[10a]"></a>UART_Configuration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32_spwf_wifi.o(i.UART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[10b]"></a>UART_Msg_Gpio_Init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32_spwf_wifi.o(i.UART_Msg_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Msg_Gpio_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>USART_PRINT_MSG_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32_spwf_wifi.o(i.USART_PRINT_MSG_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_PRINT_MSG_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>USART_Receive_AT_Resp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wifi_module.o(i.USART_Receive_AT_Resp))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
</UL>

<P><STRONG><a name="[f9]"></a>USART_Transmit_AT_Cmd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, wifi_module.o(i.USART_Transmit_AT_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
</UL>

<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_xx_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler &rArr; BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>VNI8200XP_CommErrorStatus</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_CommErrorStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_GetCommErrorStatus
</UL>

<P><STRONG><a name="[10e]"></a>VNI8200XP_EnOut</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_EnOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_EnOut
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_EnableOutputs
</UL>

<P><STRONG><a name="[10f]"></a>VNI8200XP_FaultStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_FaultStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_GetChFaultStatus
</UL>

<P><STRONG><a name="[111]"></a>VNI8200XP_FbOkStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_FbOkStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_GetFbOkStatus
</UL>

<P><STRONG><a name="[115]"></a>VNI8200XP_IO_Config</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_IO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VNI8200XP_IO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_Init
</UL>

<P><STRONG><a name="[10d]"></a>VNI8200XP_IO_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_IO_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_Deinit
</UL>

<P><STRONG><a name="[116]"></a>VNI8200XP_IO_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VNI8200XP_IO_Init &rArr; RELAY_IO_Init &rArr; SPI_EXPBD_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_Init
</UL>

<P><STRONG><a name="[112]"></a>VNI8200XP_PcFailStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_PcFailStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_GetPcFailStatus
</UL>

<P><STRONG><a name="[113]"></a>VNI8200XP_PowerGoodStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_PowerGoodStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_GetPowerGoodStatus
</UL>

<P><STRONG><a name="[117]"></a>VNI8200XP_ResetIt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_ResetIt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_ResetIt
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_Reset
</UL>

<P><STRONG><a name="[118]"></a>VNI8200XP_SendOutputData</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_SendOutputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VNI8200XP_SendOutputData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_SetOutput
</UL>

<P><STRONG><a name="[114]"></a>VNI8200XP_TempWarningStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, x_nucleo_plc01a1.o(i.VNI8200XP_TempWarningStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_GetTempWarningStatus
</UL>

<P><STRONG><a name="[f1]"></a>Wait_For_Sock_Read_To_Complete</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wifi_module.o(i.Wait_For_Sock_Read_To_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
</UL>

<P><STRONG><a name="[da]"></a>WiFiServer_Answer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, plc_handling.o(i.WiFiServer_Answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WiFiServer_Answer &rArr; wifi_socket_server_write &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>WiFi_Decode</STRONG> (Thumb, 1214 bytes, Stack size 24 bytes, ladder_lib.o(i.WiFi_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = WiFi_Decode &rArr; Component_parser &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Output
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Component_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
</UL>

<P><STRONG><a name="[b9]"></a>WiFi_HAL_UART_ErrorCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifi_module.o(i.WiFi_HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WiFi_HAL_UART_ErrorCallback &rArr; Error_Handler &rArr; Receive_Data &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[c6]"></a>WiFi_HAL_UART_RxCpltCallback</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, wifi_module.o(i.WiFi_HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_buffer_queue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_half_full
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Timer
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[ca]"></a>WiFi_HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_module.o(i.WiFi_HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[11c]"></a>WiFi_Module_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wifi_module.o(i.WiFi_Module_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WiFi_Module_Init &rArr; Error_Handler &rArr; Receive_Data &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Timer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_WiFi_Counter_Variables
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_WiFi_Control_Variables
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[ea]"></a>WiFi_switch_to_command_mode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wifi_module.o(i.WiFi_switch_to_command_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[ed]"></a>WiFi_switch_to_data_mode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wifi_module.o(i.WiFi_switch_to_data_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_DeQed_Wind_Indication
</UL>

<P><STRONG><a name="[106]"></a>Wifi_SysTick_Isr</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, wifi_module.o(i.Wifi_SysTick_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Wifi_SysTick_Isr &rArr; Process_WiFi &rArr; Process_Buffer &rArr; Process_Wind_Indication &rArr; WiFi_switch_to_command_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_half_empty
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_DeepSleep_Timer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_WiFi
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b5]"></a>Wifi_TIM_Handler</STRONG> (Thumb, 2080 bytes, Stack size 24 bytes, wifi_module.o(i.Wifi_TIM_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Wifi_TIM_Handler &rArr; Process_DeQed_Wind_Indication &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_data_received
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_on
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_connected
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_client_left
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_client_joined
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_socket_server_client_left
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_socket_server_client_joined
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_warning
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_server_data_lost
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_socket_client_remote_server_closed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_resuming
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_packet_lost
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_http_data_available
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_file_data_available
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_error
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_connection_error
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_ready
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_eventbuffer_queue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Dequeue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_DeQed_Wind_Indication
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[136]"></a>__0printf$4</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[165]"></a>__1printf$4</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4), UNUSED)

<P><STRONG><a name="[e8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_wifi_ap_client_left
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_socket_server_client_left
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Wind_Indication
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[138]"></a>__0sprintf$4</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[166]"></a>__1sprintf$4</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4), UNUSED)

<P><STRONG><a name="[f8]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0sprintf$4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
</UL>

<P><STRONG><a name="[143]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[80]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Component_parser
</UL>

<P><STRONG><a name="[141]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[13b]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[139]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[13f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[13c]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[140]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[167]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[168]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[169]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[14c]"></a>empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ring_buffer.o(i.empty))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_buffer_queue
</UL>

<P><STRONG><a name="[14d]"></a>event_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, event_buffer.o(i.event_empty))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_eventbuffer_queue
</UL>

<P><STRONG><a name="[14f]"></a>event_full</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, event_buffer.o(i.event_full))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_eventbuffer_queue
</UL>

<P><STRONG><a name="[120]"></a>event_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, event_buffer.o(i.event_init))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[13e]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[5c]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, console.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; uartSendChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf4.o(i.__0printf$4)
</UL>
<P><STRONG><a name="[14e]"></a>full</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ring_buffer.o(i.full))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_buffer_queue
</UL>

<P><STRONG><a name="[129]"></a>ind_socket_server_client_joined</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.ind_socket_server_client_joined))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[12a]"></a>ind_socket_server_client_left</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.ind_socket_server_client_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ind_socket_server_client_left &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[12e]"></a>ind_wifi_ap_client_joined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.ind_wifi_ap_client_joined))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[12f]"></a>ind_wifi_ap_client_left</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.ind_wifi_ap_client_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ind_wifi_ap_client_left &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[12d]"></a>ind_wifi_ap_ready</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_ap_ready))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[12c]"></a>ind_wifi_connected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.ind_wifi_connected))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[133]"></a>ind_wifi_connection_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_connection_error))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[131]"></a>ind_wifi_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_error))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[128]"></a>ind_wifi_file_data_available</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_file_data_available))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[127]"></a>ind_wifi_http_data_available</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_http_data_available))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[12b]"></a>ind_wifi_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.ind_wifi_on))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[134]"></a>ind_wifi_packet_lost</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_packet_lost))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[130]"></a>ind_wifi_resuming</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_resuming))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[126]"></a>ind_wifi_socket_client_remote_server_closed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_socket_client_remote_server_closed))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[124]"></a>ind_wifi_socket_data_received</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(i.ind_wifi_socket_data_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ind_wifi_socket_data_received
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[135]"></a>ind_wifi_socket_server_data_lost</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_socket_server_data_lost))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[132]"></a>ind_wifi_warning</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_module.o(i.ind_wifi_warning))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[11d]"></a>init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.init))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
</UL>

<P><STRONG><a name="[145]"></a>initializePlc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, plc_handling.o(i.initializePlc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initializePlc &rArr; BSP_Relay_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Relay_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RELAY_Reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CurrentLimiter_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Output
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlag_ResetOUT
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>is_half_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.is_half_empty))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SysTick_Isr
</UL>

<P><STRONG><a name="[11b]"></a>is_half_full</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ring_buffer.o(i.is_half_full))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; PLC_WiFi_Interface &rArr; WiFi_Decode &rArr; Component_parser &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PRINT_MSG_Configuration
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Msg_Gpio_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePlc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiServer_Answer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WiFi_Interface
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_WD
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f0]"></a>pop_buffer_queue</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, ring_buffer.o(i.pop_buffer_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pop_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_WiFi
</UL>

<P><STRONG><a name="[123]"></a>pop_eventbuffer_queue</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, event_buffer.o(i.pop_eventbuffer_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pop_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_TIM_Handler
</UL>

<P><STRONG><a name="[11a]"></a>push_buffer_queue</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ring_buffer.o(i.push_buffer_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[e3]"></a>push_eventbuffer_queue</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, event_buffer.o(i.push_eventbuffer_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = push_eventbuffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_full
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[de]"></a>reset_event</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, event_buffer.o(i.reset_event))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Client_Close_Event
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[e9]"></a>rewind_buffer_queue</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ring_buffer.o(i.rewind_buffer_queue))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Buffer
</UL>

<P><STRONG><a name="[13d]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[144]"></a>uartSendChar</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, console.o(i.uartSendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uartSendChar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[102]"></a>wait_for_command_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_interface.o(i.wait_for_command_mode))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_socket_server_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Pending_Data
</UL>

<P><STRONG><a name="[14a]"></a>wifi_ap_start</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wifi_interface.o(i.wifi_ap_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wifi_ap_start &rArr; SET_Configuration_Value &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Current_Setting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SSID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Power_State
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>wifi_init</STRONG> (Thumb, 852 bytes, Stack size 24 bytes, wifi_interface.o(i.wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wifi_init &rArr; UART_Configuration &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_wakeup
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Module_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Value
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_Configuration_Addr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>wifi_reset</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, wifi_module.o(i.wifi_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_reset &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[14b]"></a>wifi_socket_server_open</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wifi_interface.o(i.wifi_socket_server_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wifi_socket_server_open &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transmit_AT_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_AT_Resp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_AT_CMD_Buffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>wifi_socket_server_write</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, wifi_interface.o(i.wifi_socket_server_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wifi_socket_server_write &rArr; WiFi_switch_to_data_mode &rArr; USART_Transmit_AT_Cmd &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_command_mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_data_mode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_switch_to_command_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiServer_Answer
</UL>

<P><STRONG><a name="[150]"></a>wifi_wakeup</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, wifi_interface.o(i.wifi_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wifi_wakeup &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6]"></a>VNI8200XP_Deinit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_IO_Deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>VNI8200XP_EnableOutputs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_EnableOutputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VNI8200XP_EnableOutputs &rArr; VNI8200XP_EnOut
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_EnOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>VNI8200XP_GetChFaultStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_GetChFaultStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_GetChFaultStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_FaultStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>VNI8200XP_GetCommErrorStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_GetCommErrorStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_GetCommErrorStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_CommErrorStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>VNI8200XP_GetFbOkStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_GetFbOkStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_GetFbOkStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_FbOkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>VNI8200XP_GetPcFailStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_GetPcFailStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_GetPcFailStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_PcFailStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>VNI8200XP_GetPowerGoodStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_GetPowerGoodStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_GetPowerGoodStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_PowerGoodStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>VNI8200XP_GetTempWarningStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_GetTempWarningStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VNI8200XP_GetTempWarningStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_TempWarningStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>VNI8200XP_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VNI8200XP_Init &rArr; VNI8200XP_IO_Init &rArr; RELAY_IO_Init &rArr; SPI_EXPBD_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_IO_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_IO_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>VNI8200XP_Reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VNI8200XP_Reset &rArr; VNI8200XP_ResetIt
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_ResetIt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>VNI8200XP_SetOutput</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vni8200xp.o(i.VNI8200XP_SetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VNI8200XP_SetOutput &rArr; VNI8200XP_SendOutputData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNI8200XP_SendOutputData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vni8200xp.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>CLT01_38S_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clt01_38s.o(i.CLT01_38S_Deinit))
<BR>[Address Reference Count : 1]<UL><LI> clt01_38s.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>CLT01_38S_GetCommErrorStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clt01_38s.o(i.CLT01_38S_GetCommErrorStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLT01_38S_GetCommErrorStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_CommErrorStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clt01_38s.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>CLT01_38S_GetData</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clt01_38s.o(i.CLT01_38S_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLT01_38S_GetData &rArr; CLT01_38S_GetInpData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_GetInpData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clt01_38s.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>CLT01_38S_GetOtaStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clt01_38s.o(i.CLT01_38S_GetOtaStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLT01_38S_GetOtaStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_OtaStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clt01_38s.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>CLT01_38S_GetUvaStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clt01_38s.o(i.CLT01_38S_GetUvaStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLT01_38S_GetUvaStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_UvaStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clt01_38s.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>CLT01_38S_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clt01_38s.o(i.CLT01_38S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLT01_38S_Init &rArr; CURRENT_LIMITER_IO_Init &rArr; SPI_EXPBD_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CURRENT_LIMITER_IO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLT01_38S_IO_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clt01_38s.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>SPI_EXPBD_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, x_nucleo_plc01a1.o(i.SPI_EXPBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EXPBD_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EXPBD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_IO_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CURRENT_LIMITER_IO_Init
</UL>

<P><STRONG><a name="[ff]"></a>SPI_EXPBD_MspInit</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, x_nucleo_plc01a1.o(i.SPI_EXPBD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EXPBD_Init
</UL>

<P><STRONG><a name="[a1]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[a0]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[5b]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; WiFi_HAL_UART_ErrorCallback &rArr; Error_Handler &rArr; Receive_Data &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[bc]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; WiFi_HAL_UART_RxCpltCallback &rArr; push_buffer_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[a9]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ab]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[aa]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ac]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[96]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[97]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[137]"></a>_printf_core</STRONG> (Thumb, 552 bytes, Stack size 96 bytes, printf4.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$4
</UL>

<P><STRONG><a name="[5d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf4.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf4.o(i.__0sprintf$4)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
